{"ast":null,"code":"var _jsxFileName = \"/Users/kimberlyzhu/Documents/MeetingGround/src/pages/signup.tsx\";\n\n/*users.jsx*/\nimport React, { useState } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\n\nimport gql from \"graphql-tag\"; // import { Query, graphql } from \"react-apollo\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport MyCalendar from \"./Moment\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport DatePicker from \"react-datepicker\"; //yarn add react-datepicker\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\"\n});\nconst client = new ApolloClient({\n  cache,\n  link\n}); //const id = this.props.match.params.id  ;//this.props.match.params.id;\n\nconst urlId = {\n  urlid: \"\"\n};\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\nconst temp = [];\nconst [startDate, setStartDate] = useState(new Date());\n\nlet handleChange = date => {\n  this.setState({\n    startDate: date\n  });\n};\n\nlet handleColor = time => {\n  return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n};\n\nconst SignUpPage = props => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SignUpServer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CalendarCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyCalendar, {\n    myList: temp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(CalendarCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    showTimeSelect: true,\n    selected: startDate,\n    onChange: date => setStartDate(date),\n    timeClassName: handleColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })));\n};\n\nfunction SignUpServer() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_UNIQUE_LINK, {\n    variables: {\n      id: urlId.urlid\n    }\n  });\n  return loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, data.link.link, \" used by \", data.link.email, \" for \", data.link.duration));\n}\n\nconst GET_UNIQUE_LINK = gql`\n  query($id: String) {\n    link(id: $id) {\n      email\n      duration\n      link\n    }\n  }\n`;\nexport default SignUpPage;","map":{"version":3,"sources":["/Users/kimberlyzhu/Documents/MeetingGround/src/pages/signup.tsx"],"names":["React","useState","gql","useQuery","ApolloClient","InMemoryCache","HttpLink","ApolloProvider","MyCalendar","styled","DatePicker","cache","link","uri","client","urlId","urlid","CalendarCard","div","temp","startDate","setStartDate","Date","handleChange","date","setState","handleColor","time","getHours","SignUpPage","props","id","match","params","SignUpServer","loading","error","data","GET_UNIQUE_LINK","variables","email","duration"],"mappings":"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","sourcesContent":["/*users.jsx*/\nimport React, { useState } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\nimport { RouteComponentProps } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\n// import { Query, graphql } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport MyCalendar from \"./Moment\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nimport DatePicker from \"react-datepicker\";\n//yarn add react-datepicker\nimport \"react-datepicker/dist/react-datepicker.css\";\n\ninterface SignUpPagePropsInterface extends RouteComponentProps<{ id: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst cache = new InMemoryCache();\n\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link,\n});\n\n//const id = this.props.match.params.id  ;//this.props.match.params.id;\ntype Host = {\n  // Mistake #3: The type is wrong here, and that should be caught at compile-time\n  email: string;\n  firstname: string;\n  lastname: string;\n};\n\ntype Link = {\n  link: string;\n  duration: number;\n  email: string;\n};\n\nconst urlId: {\n  urlid: string;\n} = {\n  urlid: \"\",\n};\n\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\nconst temp: any[] = [];\n\nconst [startDate, setStartDate] = useState(new Date());\n\nlet handleChange = (date) => {\n  this.setState({\n    startDate: date,\n  });\n};\n\nlet handleColor = (time) => {\n  return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n};\n\nconst SignUpPage: React.FC<SignUpPagePropsInterface> = (\n  props: SignUpPagePropsInterface\n) => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n\n  return (\n    <ApolloProvider client={client}>\n      <SignUpServer />\n      <CalendarCard>\n        <MyCalendar myList={temp} />\n      </CalendarCard>\n      <CalendarCard>\n        <DatePicker\n          showTimeSelect\n          selected={startDate}\n          onChange={(date) => setStartDate(date)}\n          timeClassName={handleColor}\n        />\n      </CalendarCard>\n    </ApolloProvider>\n  );\n};\n\nfunction SignUpServer() {\n  const { loading, error, data } = useQuery(GET_UNIQUE_LINK, {\n    variables: { id: urlId.urlid },\n  });\n  return loading ? (\n    <div>loading</div>\n  ) : error ? (\n    <div>An Error occurred: {error}</div>\n  ) : (\n    <ul>\n      <li>\n        {data.link.link} used by {data.link.email} for {data.link.duration}\n      </li>\n    </ul>\n  );\n}\n\nconst GET_UNIQUE_LINK = gql`\n  query($id: String) {\n    link(id: $id) {\n      email\n      duration\n      link\n    }\n  }\n`;\n\nexport default SignUpPage;\n"]},"metadata":{},"sourceType":"module"}