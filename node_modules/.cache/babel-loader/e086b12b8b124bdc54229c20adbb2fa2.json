{"ast":null,"code":"var _jsxFileName = \"/Users/kimberlyzhu/Documents/MeetingGround/src/pages/submitInfo.tsx\";\n\n/*users.jsx*/\nimport React, { useState } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\n\nimport gql from \"graphql-tag\"; // import { Query, graphql } from \"react-apollo\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport DatePicker from \"react-datepicker\"; //yarn add react-datepicker\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport setSeconds from \"date-fns/setSeconds\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport setHours from \"date-fns/setHours\";\nimport logo from \"./img/meetingGroundLogo.png\";\nconst urlId = {\n  urlid: \"\"\n};\nconst timeSpan = {\n  interval: 45\n};\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\nconst LogoCard = styled.img`\n  width: 450px;\n  height: 100px;\n  justify-content: space-around;\n  float: left;\n`;\nconst TopFormat = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  overflow: auto;\n  display: inline-block;\n  background: white;\n  border-radius: 25px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\nconst MainBodyFormat = styled.div`\n  margin: 0 auto;\n  align-items: center;\n  justify-content: center;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  height: 650px;\n  border-radius: 25px;\n`;\nconst temp = [];\nlet interval; // let handleChange = (date: any) => {\n//   this.setState({\n//     startDate: date,\n//   });\n// };\n\nconst excludeQuery = gql`\n  query($url: String) {\n    list_available_slots(url: $url) {\n      start\n      end\n    }\n  }\n`;\nconst GET_UNIQUE_LINK = gql`\n  query($url: String) {\n    link_url(url: $url) {\n      url\n      duration\n    }\n  }\n`;\n\nconst SignUpPage = props => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n  const [startDate, setStartDate] = useState(setHours(setMinutes(new Date(), 30), 16));\n  const [startTime, setStartTime] = useState(setHours(setMinutes(new Date(), 30), 16));\n\n  let handleColor = time => {\n    return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n  };\n\n  let resultArray = [];\n\n  function useEvents(link) {\n    const {\n      loading,\n      error,\n      data\n    } = useQuery(excludeQuery, {\n      variables: {\n        url: link\n      }\n    });\n    console.log(\"DATAA HERE\"); // console.log(data.list_available_slots);\n\n    const available_slots = data === null || data === void 0 ? void 0 : data.list_available_slots;\n    console.log(available_slots);\n\n    try {\n      console.log(\"Listing items\");\n      available_slots.map(item => {\n        console.log(item);\n        let start = new Date(roundStartTimeQuarterHour(new Date(item.start)));\n        let end = new Date(roundEndTimeQuarterHour(new Date(item.end)));\n        let myDateKey = formatDate(start);\n        console.log(\"start\" + start);\n        console.log(\"end\" + end);\n        let currTimeToBeAdded = start;\n        let foundDate = resultArray.find(item => item.dateKey === myDateKey);\n        console.log(\"curr tiem to be added: \" + currTimeToBeAdded);\n\n        if (foundDate) {\n          // console.log(\"if found date\");\n          console.log(\"foundDate before\");\n          console.log(foundDate);\n\n          while (currTimeToBeAdded < end) {\n            foundDate.values.push(currTimeToBeAdded);\n            currTimeToBeAdded = new Date(currTimeToBeAdded.getTime() + 15 * 60000);\n            console.log(\"add 15 currtimetobeadded: \" + currTimeToBeAdded);\n          }\n\n          console.log(\"foundDate after\");\n          console.log(foundDate);\n        } else {\n          //console.log(\"else found date\");\n          let tempObject = {\n            dateKey: myDateKey,\n            values: []\n          };\n\n          while (currTimeToBeAdded < end) {\n            tempObject.values.push(currTimeToBeAdded);\n            currTimeToBeAdded = new Date(currTimeToBeAdded.getTime() + 15 * 60000);\n            console.log(\"add 15 currtimetobeadded: \" + currTimeToBeAdded);\n          }\n\n          resultArray.push(tempObject);\n        }\n      });\n      console.log(\"RESULT ARRAY\");\n      console.log(resultArray); //return Promise.resolve(resultArray);\n    } catch (err) {\n      console.log(\"an error in the mapping of result array dictionary\");\n      console.log(err);\n      resultArray = []; //return Promise.resolve(resultArray);\n    } // const events = ;\n\n\n    return {\n      loading,\n      error,\n      resultArray\n    };\n  }\n\n  const [excludeTimeList, setExcludeTimeList] = useState([]); //let excludeTimeList: Date[] = [];\n\n  function roundStartTimeQuarterHour(time) {\n    const timeToReturn = time;\n    timeToReturn.setMilliseconds(Math.floor(timeToReturn.getMilliseconds() / 1000) * 1000);\n    timeToReturn.setSeconds(Math.floor(timeToReturn.getSeconds() / 60) * 60);\n    timeToReturn.setMinutes(Math.floor(timeToReturn.getMinutes() / 15) * 15);\n    return timeToReturn;\n  }\n\n  function roundEndTimeQuarterHour(time) {\n    const timeToReturn = time;\n    timeToReturn.setMilliseconds(Math.ceil(timeToReturn.getMilliseconds() / 1000) * 1000);\n    timeToReturn.setSeconds(Math.ceil(timeToReturn.getSeconds() / 60) * 60);\n    timeToReturn.setMinutes(Math.ceil(timeToReturn.getMinutes() / 15) * 15);\n    return timeToReturn;\n  } // const formatDate = (date: Date) =>\n  //   `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\n\n  function ShowSlots(showSlotInfo) {\n    console.log(\"loading show slots again\");\n    const {\n      loading,\n      error,\n      resultArray\n    } = useEvents(showSlotInfo.linkCode);\n    return loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }\n    }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 7\n      }\n    }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DatePicker, {\n      selected: startDate,\n      onChange: date => {\n        console.log(\"DATE CHANGED\");\n        setStartDate(date);\n        const key = formatDate(date);\n        console.log(\"mykey: \" + key); //TODO: change setExcludeTimeList to get from server query\n\n        let tempDictionaryItem = resultArray.find(item => item.dateKey === key);\n\n        if (tempDictionaryItem !== undefined) {\n          console.log(\"setting exclude time list\");\n          let newDictionaryItemList = [];\n          tempDictionaryItem.values.map(input => {\n            let newInput = setSeconds(setMinutes(setHours(new Date(), input.getHours()), input.getMinutes()), 0);\n            newDictionaryItemList.push(newInput);\n          });\n          setExcludeTimeList(newDictionaryItemList); // excludeTimeList = newDictionaryItemList;\n        }\n\n        console.log(\"EXCLUDE TIME LIST\");\n        console.log(excludeTimeList);\n        setSelect(true);\n      },\n      timeFormat: \"HH:mm\",\n      timeIntervals: showSlotInfo.data.link_url.duration,\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }\n    }), selectTime && /*#__PURE__*/React.createElement(DatePicker, {\n      showTimeSelect: true,\n      showTimeSelectOnly: true,\n      selected: startTime,\n      onChange: date => {\n        setStartTime(date);\n        console.log(\"the list after the click WHYYYYYYYYYY\");\n        console.log(excludeTimeList);\n      },\n      timeFormat: \"HH:mm\",\n      timeIntervals: showSlotInfo.data.link_url.duration,\n      excludeTimes: excludeTimeList,\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  const [selectTime, setSelect] = useState(false);\n\n  function handleSubmit(e) {\n    if (!selectTime) {\n      window.alert(\"Date is not selected\");\n    } else {\n      e.preventDefault(); //result contains the selected time + date\n\n      let result = new Date();\n      result.setTime(startTime.getTime()); //note time includes the month/date/year\n\n      result.setDate(startDate.getDate());\n      result.setMonth(startDate.getMonth());\n      result.setFullYear(startDate.getFullYear());\n      let main = startDate;\n      console.log(main);\n      console.log(\"result is: \" + result);\n      props.history.push(\"/submit-info/\" + id + \"/\" + result.toString()); // return <Redirect to=\"/404\" />;\n    }\n  }\n\n  const formatDate = date => `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\n  function IntervalSetup() {\n    const {\n      loading,\n      error,\n      data\n    } = useQuery(GET_UNIQUE_LINK, {\n      variables: {\n        url: urlId.urlid\n      }\n    });\n    console.log(\"finished query\");\n    console.log(data);\n    return loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 7\n      }\n    }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 7\n      }\n    }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"body\", {\n      style: {\n        background: \"rgba(131, 196, 197)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TopFormat, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(LogoCard, {\n      id: \"logo\",\n      src: logo,\n      alt: \"Meeting Ground Logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        borderTop: \"5px solid grey\",\n        margin: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        // position: \"relative\",\n        margin: 0,\n        // float: \"left\",\n        // left: \"15%\",\n        justifyContent: \"center\",\n        top: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 15\n      }\n    }, \"Signup Page\"))), /*#__PURE__*/React.createElement(MainBodyFormat, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        top: 10,\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 13\n      }\n    }, \"Sign up for your \", data.link_url.duration, \" minute meeting.\"), /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 13\n      }\n    }, \"Select the date, then the time.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ShowSlots, {\n      linkCode: urlId.urlid,\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 19\n      }\n    }, \"Select Date\")))))));\n  }\n\n  return (\n    /*#__PURE__*/\n    // <ApolloProvider client={client}>\n    React.createElement(IntervalSetup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 5\n      }\n    }) // </ApolloProvider>\n\n  );\n};\n\nexport default SignUpPage; // return Promise.resolve([\n//   {\n//     dateKey: \"2020-6-20\",\n//     values: [\n//       setSeconds(setHours(setMinutes(new Date(), 0), 17), 0), // 17:00\n//       setHours(setMinutes(new Date(), 30), 18),\n//     ],\n//   },\n//   {\n//     dateKey: \"2020-6-22\",\n//     values: [\n//       setHours(setMinutes(new Date(), 30), 19),\n//       setHours(setMinutes(new Date(), 30), 17),\n//     ],\n//   },\n// ]);\n//TODO: put this on client\n// let resultArray: DictionaryItem[] = [];\n// try {\n//   rv.map((item: any) => {\n//     let myDateKey: string = formatDate(item.start);\n//     item.start = roundStartTimeQuarterHour(item.start);\n//     item.end = roundStartTimeQuarterHour(item.end);\n//     let currTimeToBeAdded = item.start;\n//     let foundDate = resultArray?.find(\n//       (item) => item.dateKey === myDateKey\n//     );\n//     if (foundDate) {\n//       while (currTimeToBeAdded < item.end) {\n//         foundDate.values.push(currTimeToBeAdded);\n//         currTimeToBeAdded.setTime(\n//           currTimeToBeAdded.getTime() + 15 * 1000 * 60\n//         );\n//       }\n//     } else {\n//       let tempObject: DictionaryItem = {\n//         dateKey: myDateKey,\n//         values: [],\n//       };\n//       while (currTimeToBeAdded < item.end) {\n//         tempObject.values.push(currTimeToBeAdded);\n//         currTimeToBeAdded.setTime(\n//           currTimeToBeAdded.getTime() + 15 * 1000 * 60\n//         );\n//       }\n//       resultArray.push(tempObject);\n//     }\n//     console.log(resultArray);\n//     return Promise.resolve(resultArray);\n//   });\n// } catch (err) {\n//   console.log(\"an error in the mapping of result array dictionary\");\n//   console.log(err);\n//   return Promise.resolve(<DictionaryItem[]>[]);\n// }","map":{"version":3,"sources":["/Users/kimberlyzhu/Documents/MeetingGround/src/pages/submitInfo.tsx"],"names":["React","useState","gql","useQuery","styled","DatePicker","setSeconds","setMinutes","setHours","logo","urlId","urlid","timeSpan","interval","CalendarCard","div","LogoCard","img","TopFormat","MainBodyFormat","temp","excludeQuery","GET_UNIQUE_LINK","SignUpPage","props","id","match","params","startDate","setStartDate","Date","startTime","setStartTime","handleColor","time","getHours","resultArray","useEvents","link","loading","error","data","variables","url","console","log","available_slots","list_available_slots","map","item","start","roundStartTimeQuarterHour","end","roundEndTimeQuarterHour","myDateKey","formatDate","currTimeToBeAdded","foundDate","find","dateKey","values","push","getTime","tempObject","err","excludeTimeList","setExcludeTimeList","timeToReturn","setMilliseconds","Math","floor","getMilliseconds","getSeconds","getMinutes","ceil","ShowSlots","showSlotInfo","linkCode","display","flexDirection","date","key","tempDictionaryItem","undefined","newDictionaryItemList","input","newInput","setSelect","link_url","duration","selectTime","handleSubmit","e","window","alert","preventDefault","result","setTime","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","main","history","toString","IntervalSetup","background","padding","justifyContent","alignContent","borderTop","margin","top"],"mappings":"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","sourcesContent":["/*users.jsx*/\nimport React, { useState, useEffect } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\nimport { RouteComponentProps } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\n// import { Query, graphql } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport MyCalendar from \"./Moment\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nimport DatePicker from \"react-datepicker\";\n//yarn add react-datepicker\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport setSeconds from \"date-fns/setSeconds\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport setHours from \"date-fns/setHours\";\n\nimport logo from \"./img/meetingGroundLogo.png\";\n\nimport Redirect, { withRouter } from \"react-router-dom\";\nimport { stringify } from \"querystring\";\ninterface SignUpPagePropsInterface extends RouteComponentProps<{ id: string }> {\n  // Other props that belong to component it self not Router\n}\n\ntype Host = {\n  // Mistake #3: The type is wrong here, and that should be caught at compile-time\n  email: string;\n  firstname: string;\n  lastname: string;\n};\n\ntype Link = {\n  link: string;\n  duration: number;\n  email: string;\n};\n\nconst urlId: {\n  urlid: string;\n} = {\n  urlid: \"\",\n};\n\nconst timeSpan: {\n  interval: number;\n} = {\n  interval: 45,\n};\n\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\n\nconst LogoCard = styled.img`\n  width: 450px;\n  height: 100px;\n  justify-content: space-around;\n  float: left;\n`;\n\nconst TopFormat = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  overflow: auto;\n  display: inline-block;\n  background: white;\n  border-radius: 25px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n\nconst MainBodyFormat = styled.div`\n  margin: 0 auto;\n  align-items: center;\n  justify-content: center;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  height: 650px;\n  border-radius: 25px;\n`;\n\nconst temp: any[] = [];\nlet interval: number;\n\n// let handleChange = (date: any) => {\n//   this.setState({\n//     startDate: date,\n//   });\n// };\n\ntype DictionaryItem = {\n  dateKey: string;\n  values: Date[];\n};\n\nconst excludeQuery = gql`\n  query($url: String) {\n    list_available_slots(url: $url) {\n      start\n      end\n    }\n  }\n`;\n\nconst GET_UNIQUE_LINK = gql`\n  query($url: String) {\n    link_url(url: $url) {\n      url\n      duration\n    }\n  }\n`;\n\nconst SignUpPage: React.FC<SignUpPagePropsInterface> = (\n  props: SignUpPagePropsInterface\n) => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n\n  type slotType = {\n    start: string;\n    end: string;\n  };\n\n  const [startDate, setStartDate] = useState<Date>(\n    setHours(setMinutes(new Date(), 30), 16)\n  );\n\n  const [startTime, setStartTime] = useState<Date>(\n    setHours(setMinutes(new Date(), 30), 16)\n  );\n\n  let handleColor = (time: any) => {\n    return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n  };\n\n  let resultArray: DictionaryItem[] = [];\n\n  function useEvents(link: string) {\n    const { loading, error, data } = useQuery(excludeQuery, {\n      variables: { url: link },\n    });\n    console.log(\"DATAA HERE\");\n\n    // console.log(data.list_available_slots);\n\n    const available_slots = data?.list_available_slots;\n    console.log(available_slots);\n\n    try {\n      console.log(\"Listing items\");\n      available_slots.map((item: any) => {\n        console.log(item);\n        let start = new Date(roundStartTimeQuarterHour(new Date(item.start)));\n        let end = new Date(roundEndTimeQuarterHour(new Date(item.end)));\n        let myDateKey: string = formatDate(start);\n\n        console.log(\"start\" + start);\n        console.log(\"end\" + end);\n\n        let currTimeToBeAdded = start;\n\n        let foundDate = resultArray.find((item) => item.dateKey === myDateKey);\n        console.log(\"curr tiem to be added: \" + currTimeToBeAdded);\n        if (foundDate) {\n          // console.log(\"if found date\");\n          console.log(\"foundDate before\");\n          console.log(foundDate);\n          while (currTimeToBeAdded < end) {\n            foundDate.values.push(currTimeToBeAdded);\n            currTimeToBeAdded = new Date(\n              currTimeToBeAdded.getTime() + 15 * 60000\n            );\n            console.log(\"add 15 currtimetobeadded: \" + currTimeToBeAdded);\n          }\n          console.log(\"foundDate after\");\n          console.log(foundDate);\n        } else {\n          //console.log(\"else found date\");\n          let tempObject: DictionaryItem = {\n            dateKey: myDateKey,\n            values: [],\n          };\n          while (currTimeToBeAdded < end) {\n            tempObject.values.push(currTimeToBeAdded);\n            currTimeToBeAdded = new Date(\n              currTimeToBeAdded.getTime() + 15 * 60000\n            );\n            console.log(\"add 15 currtimetobeadded: \" + currTimeToBeAdded);\n          }\n          resultArray.push(tempObject);\n        }\n      });\n      console.log(\"RESULT ARRAY\");\n      console.log(resultArray);\n      //return Promise.resolve(resultArray);\n    } catch (err) {\n      console.log(\"an error in the mapping of result array dictionary\");\n      console.log(err);\n      resultArray = [];\n      //return Promise.resolve(resultArray);\n    }\n    // const events = ;\n\n    return { loading, error, resultArray };\n  }\n\n  const [excludeTimeList, setExcludeTimeList] = useState<Date[]>([]);\n  //let excludeTimeList: Date[] = [];\n\n  type ShowSlotsProps = {\n    linkCode: string;\n    data: any;\n  };\n\n  function roundStartTimeQuarterHour(time: Date) {\n    const timeToReturn = time;\n\n    timeToReturn.setMilliseconds(\n      Math.floor(timeToReturn.getMilliseconds() / 1000) * 1000\n    );\n    timeToReturn.setSeconds(Math.floor(timeToReturn.getSeconds() / 60) * 60);\n    timeToReturn.setMinutes(Math.floor(timeToReturn.getMinutes() / 15) * 15);\n    return timeToReturn;\n  }\n\n  function roundEndTimeQuarterHour(time: Date) {\n    const timeToReturn = time;\n\n    timeToReturn.setMilliseconds(\n      Math.ceil(timeToReturn.getMilliseconds() / 1000) * 1000\n    );\n    timeToReturn.setSeconds(Math.ceil(timeToReturn.getSeconds() / 60) * 60);\n    timeToReturn.setMinutes(Math.ceil(timeToReturn.getMinutes() / 15) * 15);\n    return timeToReturn;\n  }\n\n  // const formatDate = (date: Date) =>\n  //   `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\n  function ShowSlots(showSlotInfo: ShowSlotsProps) {\n    console.log(\"loading show slots again\");\n    const { loading, error, resultArray } = useEvents(showSlotInfo.linkCode);\n    return loading ? (\n      <div>loading</div>\n    ) : error ? (\n      <div>An Error occurred: {error}</div>\n    ) : (\n      <div\n        className=\"form-group\"\n        style={{ display: \"flex\", flexDirection: \"row\" }}\n      >\n        <DatePicker\n          selected={startDate}\n          onChange={(date: Date) => {\n            console.log(\"DATE CHANGED\");\n            setStartDate(date);\n            const key = formatDate(date);\n\n            console.log(\"mykey: \" + key);\n            //TODO: change setExcludeTimeList to get from server query\n\n            let tempDictionaryItem = resultArray.find(\n              (item: any) => item.dateKey === key\n            );\n\n            if (tempDictionaryItem !== undefined) {\n              console.log(\"setting exclude time list\");\n              let newDictionaryItemList: Date[] = [];\n              tempDictionaryItem.values.map((input) => {\n                let newInput = setSeconds(\n                  setMinutes(\n                    setHours(new Date(), input.getHours()),\n                    input.getMinutes()\n                  ),\n                  0\n                );\n                newDictionaryItemList.push(newInput);\n              });\n\n              setExcludeTimeList(newDictionaryItemList);\n              // excludeTimeList = newDictionaryItemList;\n            }\n            console.log(\"EXCLUDE TIME LIST\");\n            console.log(excludeTimeList);\n            setSelect(true);\n          }}\n          timeFormat=\"HH:mm\"\n          timeIntervals={showSlotInfo.data.link_url.duration}\n          inline\n        />\n        {selectTime && (\n          <DatePicker\n            showTimeSelect\n            showTimeSelectOnly\n            selected={startTime}\n            onChange={(date: Date) => {\n              setStartTime(date);\n              console.log(\"the list after the click WHYYYYYYYYYY\");\n              console.log(excludeTimeList);\n            }}\n            timeFormat=\"HH:mm\"\n            timeIntervals={showSlotInfo.data.link_url.duration}\n            excludeTimes={excludeTimeList}\n            inline\n          />\n        )}\n      </div>\n    );\n  }\n\n  const [selectTime, setSelect] = useState(false);\n  function handleSubmit(e: any) {\n    if (!selectTime) {\n      window.alert(\"Date is not selected\");\n    } else {\n      e.preventDefault();\n\n      //result contains the selected time + date\n      let result = new Date();\n\n      result.setTime(startTime.getTime()); //note time includes the month/date/year\n      result.setDate(startDate.getDate());\n      result.setMonth(startDate.getMonth());\n      result.setFullYear(startDate.getFullYear());\n\n      let main = startDate;\n      console.log(main);\n\n      console.log(\"result is: \" + result);\n\n      props.history.push(\"/submit-info/\" + id + \"/\" + result.toString());\n      // return <Redirect to=\"/404\" />;\n    }\n  }\n\n  const formatDate = (date: Date) =>\n    `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\n  function IntervalSetup() {\n    const { loading, error, data } = useQuery(GET_UNIQUE_LINK, {\n      variables: { url: urlId.urlid },\n    });\n    console.log(\"finished query\");\n    console.log(data);\n\n    return loading ? (\n      <div>loading</div>\n    ) : error ? (\n      <div>An Error occurred: {error}</div>\n    ) : (\n      <body style={{ background: \"rgba(131, 196, 197)\" }}>\n        <div style={{ padding: \"1rem\" }}>\n          <TopFormat>\n            <LogoCard id=\"logo\" src={logo} alt=\"Meeting Ground Logo\" />\n            <div\n              style={{\n                justifyContent: \"center\",\n                alignContent: \"center\",\n                display: \"flex\",\n                flexDirection: \"row\",\n                borderTop: \"5px solid grey\",\n                margin: 5,\n              }}\n            >\n              <h1\n                style={{\n                  // position: \"relative\",\n                  margin: 0,\n                  // float: \"left\",\n                  // left: \"15%\",\n                  justifyContent: \"center\",\n                  top: 20,\n                }}\n              >\n                Signup Page\n              </h1>\n            </div>\n          </TopFormat>\n\n          <MainBodyFormat>\n            <h1 style={{ top: 10, margin: 20 }}>\n              Sign up for your {data.link_url.duration} minute meeting.\n            </h1>\n            <h2 style={{ margin: 20 }}>Select the date, then the time.</h2>\n            <div className=\"form-group\">\n              <form onSubmit={handleSubmit}>\n                <ShowSlots linkCode={urlId.urlid} data={data} />\n\n                <div\n                  className=\"form-group\"\n                  style={{ display: \"flex\", flexDirection: \"column\" }}\n                >\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Select Date\n                  </button>\n                </div>\n              </form>\n            </div>\n          </MainBodyFormat>\n        </div>\n      </body>\n    );\n  }\n\n  return (\n    // <ApolloProvider client={client}>\n    <IntervalSetup />\n    // </ApolloProvider>\n  );\n};\n\nexport default SignUpPage;\n\n// return Promise.resolve([\n//   {\n//     dateKey: \"2020-6-20\",\n//     values: [\n//       setSeconds(setHours(setMinutes(new Date(), 0), 17), 0), // 17:00\n//       setHours(setMinutes(new Date(), 30), 18),\n//     ],\n//   },\n//   {\n//     dateKey: \"2020-6-22\",\n//     values: [\n//       setHours(setMinutes(new Date(), 30), 19),\n//       setHours(setMinutes(new Date(), 30), 17),\n//     ],\n//   },\n// ]);\n\n//TODO: put this on client\n// let resultArray: DictionaryItem[] = [];\n// try {\n//   rv.map((item: any) => {\n//     let myDateKey: string = formatDate(item.start);\n//     item.start = roundStartTimeQuarterHour(item.start);\n//     item.end = roundStartTimeQuarterHour(item.end);\n\n//     let currTimeToBeAdded = item.start;\n\n//     let foundDate = resultArray?.find(\n//       (item) => item.dateKey === myDateKey\n//     );\n//     if (foundDate) {\n//       while (currTimeToBeAdded < item.end) {\n//         foundDate.values.push(currTimeToBeAdded);\n//         currTimeToBeAdded.setTime(\n//           currTimeToBeAdded.getTime() + 15 * 1000 * 60\n//         );\n//       }\n//     } else {\n//       let tempObject: DictionaryItem = {\n//         dateKey: myDateKey,\n//         values: [],\n//       };\n//       while (currTimeToBeAdded < item.end) {\n//         tempObject.values.push(currTimeToBeAdded);\n//         currTimeToBeAdded.setTime(\n//           currTimeToBeAdded.getTime() + 15 * 1000 * 60\n//         );\n//       }\n//       resultArray.push(tempObject);\n//     }\n//     console.log(resultArray);\n//     return Promise.resolve(resultArray);\n//   });\n// } catch (err) {\n//   console.log(\"an error in the mapping of result array dictionary\");\n//   console.log(err);\n//   return Promise.resolve(<DictionaryItem[]>[]);\n// }\n"]},"metadata":{},"sourceType":"module"}