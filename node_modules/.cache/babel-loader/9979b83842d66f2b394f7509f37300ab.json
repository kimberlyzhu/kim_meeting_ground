{"ast":null,"code":"var _jsxFileName = \"/Users/kimberlyzhu/Documents/MeetingGround/src/pages/signup.tsx\";\n\n/*users.jsx*/\nimport React, { useState } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\n\nimport gql from \"graphql-tag\"; // import { Query, graphql } from \"react-apollo\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport DatePicker from \"react-datepicker\"; //yarn add react-datepicker\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport setSeconds from \"date-fns/setSeconds\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport setHours from \"date-fns/setHours\";\nimport logo from \"./img/meetingGroundLogo.png\";\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\"\n});\nconst client = new ApolloClient({\n  cache,\n  link\n}); //const id = this.props.match.params.id  ;//this.props.match.params.id;\n\nconst urlId = {\n  urlid: \"\"\n};\nconst timeSpan = {\n  interval: 45\n};\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\nconst LogoCard = styled.img`\n  width: 450px;\n  height: 100px;\n  justify-content: space-around;\n  float: left;\n`;\nconst TopFormat = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  overflow: auto;\n  display: inline-block;\n  background: white;\n  border-radius: 25px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\nconst MainBodyFormat = styled.div`\n  margin: 0 auto;\n  align-items: center;\n  justify-content: center;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  height: 650px;\n  border-radius: 25px;\n`;\nconst temp = [];\nlet interval; // let handleChange = (date: any) => {\n//   this.setState({\n//     startDate: date,\n//   });\n// };\n\nconst excludeQuery = gql`\n  query($link: String) {\n    list_available_slots(url: $link)\n  }\n`;\n\nfunction useEvents(link) {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(excludeQuery, {\n    variables: {\n      link\n    }\n  });\n  const events = data === null || data === void 0 ? void 0 : data.events;\n  return {\n    loading,\n    error,\n    events\n  };\n}\n\nconst SignUpPage = props => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n  const [startDate, setStartDate] = useState(setHours(setMinutes(new Date(), 30), 16));\n  const [startTime, setStartTime] = useState(setHours(setMinutes(new Date(), 30), 16)); //const [interval, setInterval] = useState(45);\n\n  const [userEmail, setUserEmail] = useState(\"\");\n\n  let handleColor = time => {\n    return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n  };\n\n  const [excludeTimeDictionary, setExcludeTimeDictionary] = useState([{\n    dateKey: \"2020-6-20\",\n    values: [setSeconds(setHours(setMinutes(new Date(), 0), 17), 0), // 17:00\n    setHours(setMinutes(new Date(), 30), 18)]\n  }, {\n    dateKey: \"2020-6-22\",\n    values: [setHours(setMinutes(new Date(), 30), 19), setHours(setMinutes(new Date(), 30), 17)]\n  }]); //setExcludeTimeDictionary();\n  //let excludeTimeList: Date[] = [];\n\n  const [excludeTimeList, setExcludeTimeList] = useState([]); //TODO: BELOW IS FOR WHEN DATABASE IS CONNECTED\n  // function useEvents(linkCode: string) {\n  //     return useQuery(GetEventsQuery, variable: { linkCode } );\n  // }\n  // function useEvents(linkCode: string) {\n  //   return {\n  //     loading: false,\n  //     error: null,\n  //     events: excludeTimeDictionary,\n  //   };\n  // }\n\n  function ShowSlots(showSlotInfo) {\n    //{ linkCode }: ShowSlotsProps\n    const {\n      loading,\n      error,\n      events\n    } = useEvents(showSlotInfo.linkCode);\n    return loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DatePicker, {\n      selected: startDate,\n      onChange: date => {\n        setStartDate(date);\n        const key = formatDate(date);\n        console.log(\"mykey: \" + key); //TODO: change setExcludeTimeList to get from server query\n\n        let tempDictionaryItem = events === null || events === void 0 ? void 0 : events.find(item => item.dateKey === key);\n\n        if (tempDictionaryItem !== undefined) {\n          setExcludeTimeList(tempDictionaryItem.values);\n        }\n\n        console.log(excludeTimeList);\n        setSelect(true);\n      },\n      timeFormat: \"HH:mm\",\n      timeIntervals: showSlotInfo.data.link.duration,\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }), selectTime && /*#__PURE__*/React.createElement(DatePicker, {\n      showTimeSelect: true,\n      showTimeSelectOnly: true,\n      selected: startTime,\n      onChange: date => setStartTime(date),\n      timeFormat: \"HH:mm\",\n      timeIntervals: showSlotInfo.data.link.duration,\n      excludeTimes: excludeTimeList,\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  const [selectTime, setSelect] = useState(false);\n\n  function handleSubmit(e) {\n    if (!selectTime) {\n      window.alert(\"Date is not selected\");\n    } else {\n      e.preventDefault(); //result contains the selected time + date\n\n      let result = new Date();\n      result.setTime(startTime.getTime()); //note time includes the month/date/year\n\n      result.setDate(startDate.getDate());\n      result.setMonth(startDate.getMonth());\n      result.setFullYear(startDate.getFullYear());\n      let main = startDate;\n      console.log(main);\n      console.log(\"result is: \" + result);\n      props.history.push(\"/submit-info/\" + id + \"/\" + result.toString()); // return <Redirect to=\"/404\" />;\n    }\n  }\n\n  const formatDate = date => `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\n  function IntervalSetup() {\n    const {\n      loading,\n      error,\n      data\n    } = useQuery(GET_UNIQUE_LINK, {\n      variables: {\n        id: urlId.urlid\n      }\n    });\n    return loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 7\n      }\n    }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 7\n      }\n    }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"body\", {\n      style: {\n        background: \"rgba(131, 196, 197)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TopFormat, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(LogoCard, {\n      id: \"logo\",\n      src: logo,\n      alt: \"Meeting Ground Logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        borderTop: \"5px solid grey\",\n        margin: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        // position: \"relative\",\n        margin: 0,\n        // float: \"left\",\n        // left: \"15%\",\n        justifyContent: \"center\",\n        top: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 15\n      }\n    }, \"Signup Page\"))), /*#__PURE__*/React.createElement(MainBodyFormat, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        top: 10,\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }\n    }, \"Sign up for your \", data.link.duration, \" minute meeting.\"), /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }, \"Select the date, then the time.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ShowSlots, {\n      linkCode: urlId.urlid,\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 19\n      }\n    }, \"Select Date\")))))));\n  } //interval = IntervalSetup() > 0 ? IntervalSetup() : 45;\n\n\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IntervalSetup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction SignUpServer() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_UNIQUE_LINK, {\n    variables: {\n      id: urlId.urlid\n    }\n  });\n  return loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 5\n    }\n  }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 5\n    }\n  }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }\n  }, data.link.link, \" used by \", data.link.email, \" for \", data.link.duration));\n}\n\nconst GET_UNIQUE_LINK = gql`\n  query($id: String) {\n    link(id: $id) {\n      email\n      duration\n      link\n    }\n  }\n`;\nexport default SignUpPage;","map":{"version":3,"sources":["/Users/kimberlyzhu/Documents/MeetingGround/src/pages/signup.tsx"],"names":["React","useState","gql","useQuery","ApolloClient","InMemoryCache","HttpLink","ApolloProvider","styled","DatePicker","setSeconds","setMinutes","setHours","logo","cache","link","uri","client","urlId","urlid","timeSpan","interval","CalendarCard","div","LogoCard","img","TopFormat","MainBodyFormat","temp","excludeQuery","useEvents","loading","error","data","variables","events","SignUpPage","props","id","match","params","startDate","setStartDate","Date","startTime","setStartTime","userEmail","setUserEmail","handleColor","time","getHours","excludeTimeDictionary","setExcludeTimeDictionary","dateKey","values","excludeTimeList","setExcludeTimeList","ShowSlots","showSlotInfo","linkCode","display","flexDirection","date","key","formatDate","console","log","tempDictionaryItem","find","item","undefined","setSelect","duration","selectTime","handleSubmit","e","window","alert","preventDefault","result","setTime","getTime","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","main","history","push","toString","IntervalSetup","GET_UNIQUE_LINK","background","padding","justifyContent","alignContent","borderTop","margin","top","SignUpServer","email"],"mappings":"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","sourcesContent":["/*users.jsx*/\nimport React, { useState, useEffect } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\nimport { RouteComponentProps } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\n// import { Query, graphql } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport MyCalendar from \"./Moment\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nimport DatePicker from \"react-datepicker\";\n//yarn add react-datepicker\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport setSeconds from \"date-fns/setSeconds\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport setHours from \"date-fns/setHours\";\n\nimport logo from \"./img/meetingGroundLogo.png\";\n\nimport Redirect, { withRouter } from \"react-router-dom\";\ninterface SignUpPagePropsInterface extends RouteComponentProps<{ id: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst cache = new InMemoryCache();\n\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link,\n});\n\n//const id = this.props.match.params.id  ;//this.props.match.params.id;\ntype Host = {\n  // Mistake #3: The type is wrong here, and that should be caught at compile-time\n  email: string;\n  firstname: string;\n  lastname: string;\n};\n\ntype Link = {\n  link: string;\n  duration: number;\n  email: string;\n};\n\nconst urlId: {\n  urlid: string;\n} = {\n  urlid: \"\",\n};\n\nconst timeSpan: {\n  interval: number;\n} = {\n  interval: 45,\n};\n\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\n\nconst LogoCard = styled.img`\n  width: 450px;\n  height: 100px;\n  justify-content: space-around;\n  float: left;\n`;\n\nconst TopFormat = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  overflow: auto;\n  display: inline-block;\n  background: white;\n  border-radius: 25px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n\nconst MainBodyFormat = styled.div`\n  margin: 0 auto;\n  align-items: center;\n  justify-content: center;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  height: 650px;\n  border-radius: 25px;\n`;\n\nconst temp: any[] = [];\nlet interval: number;\n\n// let handleChange = (date: any) => {\n//   this.setState({\n//     startDate: date,\n//   });\n// };\n\ntype DictionaryItem = {\n  dateKey: string;\n  values: Date[];\n};\n\nconst excludeQuery = gql`\n  query($link: String) {\n    list_available_slots(url: $link)\n  }\n`;\n\nfunction useEvents(link: string) {\n  const { loading, error, data } = useQuery<{ events: DictionaryItem[] }>(\n    excludeQuery,\n    { variables: { link } }\n  );\n  const events = data?.events;\n\n  return { loading, error, events };\n}\n\nconst SignUpPage: React.FC<SignUpPagePropsInterface> = (\n  props: SignUpPagePropsInterface\n) => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n\n  const [startDate, setStartDate] = useState<Date>(\n    setHours(setMinutes(new Date(), 30), 16)\n  );\n\n  const [startTime, setStartTime] = useState<Date>(\n    setHours(setMinutes(new Date(), 30), 16)\n  );\n  //const [interval, setInterval] = useState(45);\n  const [userEmail, setUserEmail] = useState(\"\");\n\n  let handleColor = (time: any) => {\n    return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n  };\n\n  const [excludeTimeDictionary, setExcludeTimeDictionary] = useState<\n    DictionaryItem[]\n  >([\n    {\n      dateKey: \"2020-6-20\",\n      values: [\n        setSeconds(setHours(setMinutes(new Date(), 0), 17), 0), // 17:00\n        setHours(setMinutes(new Date(), 30), 18),\n      ],\n    },\n    {\n      dateKey: \"2020-6-22\",\n      values: [\n        setHours(setMinutes(new Date(), 30), 19),\n        setHours(setMinutes(new Date(), 30), 17),\n      ],\n    },\n  ]);\n  //setExcludeTimeDictionary();\n  //let excludeTimeList: Date[] = [];\n  const [excludeTimeList, setExcludeTimeList] = useState<Date[]>([]);\n\n  //TODO: BELOW IS FOR WHEN DATABASE IS CONNECTED\n  // function useEvents(linkCode: string) {\n  //     return useQuery(GetEventsQuery, variable: { linkCode } );\n  // }\n\n  // function useEvents(linkCode: string) {\n  //   return {\n  //     loading: false,\n  //     error: null,\n  //     events: excludeTimeDictionary,\n  //   };\n  // }\n\n  type ShowSlotsProps = {\n    linkCode: string;\n    data: any;\n  };\n\n  function ShowSlots(showSlotInfo: ShowSlotsProps) {\n    //{ linkCode }: ShowSlotsProps\n    const { loading, error, events } = useEvents(showSlotInfo.linkCode);\n    return loading ? (\n      <div>loading</div>\n    ) : error ? (\n      <div>An Error occurred: {error}</div>\n    ) : (\n      <div\n        className=\"form-group\"\n        style={{ display: \"flex\", flexDirection: \"row\" }}\n      >\n        <DatePicker\n          selected={startDate}\n          onChange={(date: Date) => {\n            setStartDate(date);\n            const key = formatDate(date);\n\n            console.log(\"mykey: \" + key);\n            //TODO: change setExcludeTimeList to get from server query\n\n            let tempDictionaryItem = events?.find(\n              (item) => item.dateKey === key\n            );\n            if (tempDictionaryItem !== undefined) {\n              setExcludeTimeList(tempDictionaryItem.values);\n            }\n            console.log(excludeTimeList);\n            setSelect(true);\n          }}\n          timeFormat=\"HH:mm\"\n          timeIntervals={showSlotInfo.data.link.duration}\n          inline\n        />\n        {selectTime && (\n          <DatePicker\n            showTimeSelect\n            showTimeSelectOnly\n            selected={startTime}\n            onChange={(date: Date) => setStartTime(date)}\n            timeFormat=\"HH:mm\"\n            timeIntervals={showSlotInfo.data.link.duration}\n            excludeTimes={excludeTimeList}\n            inline\n          />\n        )}\n      </div>\n    );\n  }\n\n  const [selectTime, setSelect] = useState(false);\n  function handleSubmit(e: any) {\n    if (!selectTime) {\n      window.alert(\"Date is not selected\");\n    } else {\n      e.preventDefault();\n\n      //result contains the selected time + date\n      let result = new Date();\n\n      result.setTime(startTime.getTime()); //note time includes the month/date/year\n      result.setDate(startDate.getDate());\n      result.setMonth(startDate.getMonth());\n      result.setFullYear(startDate.getFullYear());\n\n      let main = startDate;\n      console.log(main);\n\n      console.log(\"result is: \" + result);\n\n      props.history.push(\"/submit-info/\" + id + \"/\" + result.toString());\n      // return <Redirect to=\"/404\" />;\n    }\n  }\n\n  const formatDate = (date: Date) =>\n    `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\n  function IntervalSetup() {\n    const { loading, error, data } = useQuery(GET_UNIQUE_LINK, {\n      variables: { id: urlId.urlid },\n    });\n\n    return loading ? (\n      <div>loading</div>\n    ) : error ? (\n      <div>An Error occurred: {error}</div>\n    ) : (\n      <body style={{ background: \"rgba(131, 196, 197)\" }}>\n        <div style={{ padding: \"1rem\" }}>\n          <TopFormat>\n            <LogoCard id=\"logo\" src={logo} alt=\"Meeting Ground Logo\" />\n            <div\n              style={{\n                justifyContent: \"center\",\n                alignContent: \"center\",\n                display: \"flex\",\n                flexDirection: \"row\",\n                borderTop: \"5px solid grey\",\n                margin: 5,\n              }}\n            >\n              <h1\n                style={{\n                  // position: \"relative\",\n                  margin: 0,\n                  // float: \"left\",\n                  // left: \"15%\",\n                  justifyContent: \"center\",\n                  top: 20,\n                }}\n              >\n                Signup Page\n              </h1>\n            </div>\n          </TopFormat>\n\n          <MainBodyFormat>\n            <h1 style={{ top: 10, margin: 20 }}>\n              Sign up for your {data.link.duration} minute meeting.\n            </h1>\n            <h2 style={{ margin: 20 }}>Select the date, then the time.</h2>\n            <div className=\"form-group\">\n              <form onSubmit={handleSubmit}>\n                <ShowSlots linkCode={urlId.urlid} data={data} />\n\n                <div\n                  className=\"form-group\"\n                  style={{ display: \"flex\", flexDirection: \"column\" }}\n                >\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Select Date\n                  </button>\n                </div>\n              </form>\n            </div>\n          </MainBodyFormat>\n        </div>\n      </body>\n    );\n  }\n\n  //interval = IntervalSetup() > 0 ? IntervalSetup() : 45;\n\n  return (\n    <ApolloProvider client={client}>\n      {/* <SignUpServer /> */}\n\n      <IntervalSetup />\n\n      {/* <CalendarCard>\n        <IntervalSetup />\n      </CalendarCard> */}\n      {/* <CalendarCard>\n        <MyCalendar myList={temp} />\n      </CalendarCard> */}\n    </ApolloProvider>\n  );\n};\n\nfunction SignUpServer() {\n  const { loading, error, data } = useQuery(GET_UNIQUE_LINK, {\n    variables: { id: urlId.urlid },\n  });\n  return loading ? (\n    <div>loading</div>\n  ) : error ? (\n    <div>An Error occurred: {error}</div>\n  ) : (\n    <ul>\n      <li>\n        {data.link.link} used by {data.link.email} for {data.link.duration}\n      </li>\n    </ul>\n  );\n}\n\nconst GET_UNIQUE_LINK = gql`\n  query($id: String) {\n    link(id: $id) {\n      email\n      duration\n      link\n    }\n  }\n`;\n\nexport default SignUpPage;\n"]},"metadata":{},"sourceType":"module"}