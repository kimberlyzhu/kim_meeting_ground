{"ast":null,"code":"var _jsxFileName = \"/Users/kimberlyzhu/Documents/MeetingGround/src/pages/signup.tsx\";\n\n/*users.jsx*/\nimport React, { useState } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\n\nimport gql from \"graphql-tag\"; // import { Query, graphql } from \"react-apollo\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport DatePicker from \"react-datepicker\"; //yarn add react-datepicker\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport setHours from \"date-fns/setHours\";\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\"\n});\nconst client = new ApolloClient({\n  cache,\n  link\n}); //const id = this.props.match.params.id  ;//this.props.match.params.id;\n\nconst urlId = {\n  urlid: \"\"\n};\nconst timeSpan = {\n  interval: 45\n};\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\nconst temp = [];\nlet interval; // let handleChange = (date: any) => {\n//   this.setState({\n//     startDate: date,\n//   });\n// };\n\nconst SignUpPage = props => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n  const [startDate, setStartDate] = useState(setHours(setMinutes(new Date(), 30), 16));\n  const [startTime, setStartTime] = useState(setHours(setMinutes(new Date(), 30), 16)); //const [interval, setInterval] = useState(45);\n\n  let handleColor = time => {\n    return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n  };\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    let main = startDate;\n    console.log(main);\n    props.history.push(\"/submit-info\"); // return <Redirect to=\"/404\" />;\n  }\n\n  function IntervalSetup() {\n    const {\n      loading,\n      error,\n      data\n    } = useQuery(GET_UNIQUE_LINK, {\n      variables: {\n        id: urlId.urlid\n      }\n    });\n    return loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DatePicker // showTimeSelect\n    , {\n      selected: startDate,\n      onChange: date => setStartDate(date),\n      timeFormat: \"HH:mm\",\n      timeIntervals: data.link.duration,\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DatePicker, {\n      showTimeSelect: true,\n      showTimeSelectOnly: true,\n      selected: startDate,\n      onChange: date => setStartDate(date),\n      timeFormat: \"HH:mm\",\n      timeIntervals: data.link.duration,\n      excludeTimes: [setHours(setMinutes(new Date(2020, 7, 20), 0), 17), // 17:00\n      setHours(setMinutes(new Date(), 30), 18), setHours(setMinutes(new Date(), 30), 19), setHours(setMinutes(new Date(), 30), 17)],\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, \"Select Date\"))));\n  } //interval = IntervalSetup() > 0 ? IntervalSetup() : 45;\n\n\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SignUpServer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CalendarCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IntervalSetup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  })));\n};\n\nfunction SignUpServer() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_UNIQUE_LINK, {\n    variables: {\n      id: urlId.urlid\n    }\n  });\n  return loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, \"loading\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, \"An Error occurred: \", error) : /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, data.link.link, \" used by \", data.link.email, \" for \", data.link.duration));\n}\n\nconst GET_UNIQUE_LINK = gql`\n  query($id: String) {\n    link(id: $id) {\n      email\n      duration\n      link\n    }\n  }\n`;\nexport default SignUpPage;","map":{"version":3,"sources":["/Users/kimberlyzhu/Documents/MeetingGround/src/pages/signup.tsx"],"names":["React","useState","gql","useQuery","ApolloClient","InMemoryCache","HttpLink","ApolloProvider","styled","DatePicker","setMinutes","setHours","cache","link","uri","client","urlId","urlid","timeSpan","interval","CalendarCard","div","temp","SignUpPage","props","id","match","params","startDate","setStartDate","Date","startTime","setStartTime","handleColor","time","getHours","handleSubmit","e","preventDefault","main","console","log","history","push","IntervalSetup","loading","error","data","GET_UNIQUE_LINK","variables","date","duration","SignUpServer","email"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C,C,CAAoD;AACpD;;AAEA,OAAOC,GAAP,MAAgB,aAAhB,C,CACA;;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAO,mDAAP;AAEA,OAAOC,UAAP,MAAuB,kBAAvB,C,CACA;;AACA,OAAO,4CAAP;AACA,OAAO,sCAAP;AAEA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAOA,MAAMC,KAAK,GAAG,IAAIP,aAAJ,EAAd;AAEA,MAAMQ,IAAI,GAAG,IAAIP,QAAJ,CAAa;AACxBQ,EAAAA,GAAG,EAAE;AADmB,CAAb,CAAb;AAIA,MAAMC,MAA2C,GAAG,IAAIX,YAAJ,CAAiB;AACnEQ,EAAAA,KADmE;AAEnEC,EAAAA;AAFmE,CAAjB,CAApD,C,CAKA;;AAcA,MAAMG,KAEL,GAAG;AACFC,EAAAA,KAAK,EAAE;AADL,CAFJ;AAMA,MAAMC,QAEL,GAAG;AACFC,EAAAA,QAAQ,EAAE;AADR,CAFJ;AAMA,MAAMC,YAAY,GAAGZ,MAAM,CAACa,GAAI;;;;;;CAAhC;AAOA,MAAMC,IAAW,GAAG,EAApB;AACA,IAAIH,QAAJ,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,UAA8C,GAClDC,KADqD,IAElD;AACH,QAAMC,EAAE,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B;AACAT,EAAAA,KAAK,CAACC,KAAN,GAAcQ,EAAd;AAEA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CACxCU,QAAQ,CAACD,UAAU,CAAC,IAAIoB,IAAJ,EAAD,EAAa,EAAb,CAAX,EAA6B,EAA7B,CADgC,CAA1C;AAIA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CACxCU,QAAQ,CAACD,UAAU,CAAC,IAAIoB,IAAJ,EAAD,EAAa,EAAb,CAAX,EAA6B,EAA7B,CADgC,CAA1C,CARG,CAWH;;AAEA,MAAIG,WAAW,GAAIC,IAAD,IAAe;AAC/B,WAAOA,IAAI,CAACC,QAAL,KAAkB,EAAlB,GAAuB,cAAvB,GAAwC,YAA/C;AACD,GAFD;;AAIA,WAASC,YAAT,CAAsBC,CAAtB,EAA8B;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,IAAI,GAAGX,SAAX;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAf,IAAAA,KAAK,CAACkB,OAAN,CAAcC,IAAd,CAAmB,cAAnB,EAJ4B,CAK5B;AACD;;AAED,WAASC,aAAT,GAAyB;AACvB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,QAA2B5C,QAAQ,CAAC6C,eAAD,EAAkB;AACzDC,MAAAA,SAAS,EAAE;AAAExB,QAAAA,EAAE,EAAET,KAAK,CAACC;AAAZ;AAD8C,KAAlB,CAAzC;AAIA,WAAO4B,OAAO,gBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADY,GAEVC,KAAK,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAyBA,KAAzB,CADO,gBAGP;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,QAAQ,EAAEV,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD,CACE;AADF;AAEE,MAAA,QAAQ,EAAER,SAFZ;AAGE,MAAA,QAAQ,EAAGsB,IAAD,IAAUrB,YAAY,CAACqB,IAAD,CAHlC;AAIE,MAAA,UAAU,EAAC,OAJb;AAKE,MAAA,aAAa,EAAEH,IAAI,CAAClC,IAAL,CAAUsC,QAL3B;AAME,MAAA,MAAM,MANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eASE,oBAAC,UAAD;AACE,MAAA,cAAc,MADhB;AAEE,MAAA,kBAAkB,MAFpB;AAGE,MAAA,QAAQ,EAAEvB,SAHZ;AAIE,MAAA,QAAQ,EAAGsB,IAAD,IAAUrB,YAAY,CAACqB,IAAD,CAJlC;AAKE,MAAA,UAAU,EAAC,OALb;AAME,MAAA,aAAa,EAAEH,IAAI,CAAClC,IAAL,CAAUsC,QAN3B;AAOE,MAAA,YAAY,EAAE,CACZxC,QAAQ,CAACD,UAAU,CAAC,IAAIoB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAAD,EAAwB,CAAxB,CAAX,EAAuC,EAAvC,CADI,EACwC;AACpDnB,MAAAA,QAAQ,CAACD,UAAU,CAAC,IAAIoB,IAAJ,EAAD,EAAa,EAAb,CAAX,EAA6B,EAA7B,CAFI,EAGZnB,QAAQ,CAACD,UAAU,CAAC,IAAIoB,IAAJ,EAAD,EAAa,EAAb,CAAX,EAA6B,EAA7B,CAHI,EAIZnB,QAAQ,CAACD,UAAU,CAAC,IAAIoB,IAAJ,EAAD,EAAa,EAAb,CAAX,EAA6B,EAA7B,CAJI,CAPhB;AAaE,MAAA,MAAM,MAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAwBE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CAxBF,CADF,CALF;AAsCD,GApEE,CAsEH;;;AAEA,sBACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEf,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CADF;AAYD,CAtFD;;AAwFA,SAASqC,YAAT,GAAwB;AACtB,QAAM;AAAEP,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2B5C,QAAQ,CAAC6C,eAAD,EAAkB;AACzDC,IAAAA,SAAS,EAAE;AAAExB,MAAAA,EAAE,EAAET,KAAK,CAACC;AAAZ;AAD8C,GAAlB,CAAzC;AAGA,SAAO4B,OAAO,gBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADY,GAEVC,KAAK,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAyBA,KAAzB,CADO,gBAGP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAAClC,IAAL,CAAUA,IADb,eAC4BkC,IAAI,CAAClC,IAAL,CAAUwC,KADtC,WACkDN,IAAI,CAAClC,IAAL,CAAUsC,QAD5D,CADF,CALF;AAWD;;AAED,MAAMH,eAAe,GAAG9C,GAAI;;;;;;;;CAA5B;AAUA,eAAeqB,UAAf","sourcesContent":["/*users.jsx*/\nimport React, { useState, useEffect } from \"react\"; //, { Component, useState }\n//You have to use the link component to link between you pages\nimport { RouteComponentProps } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\n// import { Query, graphql } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport MyCalendar from \"./Moment\";\nimport styled from \"@emotion/styled\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nimport DatePicker from \"react-datepicker\";\n//yarn add react-datepicker\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport setSeconds from \"date-fns/setSeconds\";\nimport setMinutes from \"date-fns/setMinutes\";\nimport setHours from \"date-fns/setHours\";\n\nimport Redirect, { withRouter } from \"react-router-dom\";\ninterface SignUpPagePropsInterface extends RouteComponentProps<{ id: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst cache = new InMemoryCache();\n\nconst link = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link,\n});\n\n//const id = this.props.match.params.id  ;//this.props.match.params.id;\ntype Host = {\n  // Mistake #3: The type is wrong here, and that should be caught at compile-time\n  email: string;\n  firstname: string;\n  lastname: string;\n};\n\ntype Link = {\n  link: string;\n  duration: number;\n  email: string;\n};\n\nconst urlId: {\n  urlid: string;\n} = {\n  urlid: \"\",\n};\n\nconst timeSpan: {\n  interval: number;\n} = {\n  interval: 45,\n};\n\nconst CalendarCard = styled.div`\n  margin: 0 auto;\n  width: 1000px;\n  height: 1000px;\n  align-items: center;\n  border-radius: 15px;\n`;\nconst temp: any[] = [];\nlet interval: number;\n\n// let handleChange = (date: any) => {\n//   this.setState({\n//     startDate: date,\n//   });\n// };\n\nconst SignUpPage: React.FC<SignUpPagePropsInterface> = (\n  props: SignUpPagePropsInterface\n) => {\n  const id = props.match.params.id;\n  urlId.urlid = id;\n\n  const [startDate, setStartDate] = useState<Date | null>(\n    setHours(setMinutes(new Date(), 30), 16)\n  );\n\n  const [startTime, setStartTime] = useState<Date | null>(\n    setHours(setMinutes(new Date(), 30), 16)\n  );\n  //const [interval, setInterval] = useState(45);\n\n  let handleColor = (time: any) => {\n    return time.getHours() > 12 ? \"text-success\" : \"text-error\";\n  };\n\n  function handleSubmit(e: any) {\n    e.preventDefault();\n    let main = startDate;\n    console.log(main);\n    props.history.push(\"/submit-info\");\n    // return <Redirect to=\"/404\" />;\n  }\n\n  function IntervalSetup() {\n    const { loading, error, data } = useQuery(GET_UNIQUE_LINK, {\n      variables: { id: urlId.urlid },\n    });\n\n    return loading ? (\n      <div>loading</div>\n    ) : error ? (\n      <div>An Error occurred: {error}</div>\n    ) : (\n      <div className=\"form-group\">\n        <form onSubmit={handleSubmit}>\n          <DatePicker\n            // showTimeSelect\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            timeFormat=\"HH:mm\"\n            timeIntervals={data.link.duration}\n            inline\n          />\n          <DatePicker\n            showTimeSelect\n            showTimeSelectOnly\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            timeFormat=\"HH:mm\"\n            timeIntervals={data.link.duration}\n            excludeTimes={[\n              setHours(setMinutes(new Date(2020, 7, 20), 0), 17), // 17:00\n              setHours(setMinutes(new Date(), 30), 18),\n              setHours(setMinutes(new Date(), 30), 19),\n              setHours(setMinutes(new Date(), 30), 17),\n            ]}\n            inline\n          />\n          <div className=\"form-group\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Select Date\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  //interval = IntervalSetup() > 0 ? IntervalSetup() : 45;\n\n  return (\n    <ApolloProvider client={client}>\n      <SignUpServer />\n\n      <CalendarCard>\n        <IntervalSetup />\n      </CalendarCard>\n      {/* <CalendarCard>\n        <MyCalendar myList={temp} />\n      </CalendarCard> */}\n    </ApolloProvider>\n  );\n};\n\nfunction SignUpServer() {\n  const { loading, error, data } = useQuery(GET_UNIQUE_LINK, {\n    variables: { id: urlId.urlid },\n  });\n  return loading ? (\n    <div>loading</div>\n  ) : error ? (\n    <div>An Error occurred: {error}</div>\n  ) : (\n    <ul>\n      <li>\n        {data.link.link} used by {data.link.email} for {data.link.duration}\n      </li>\n    </ul>\n  );\n}\n\nconst GET_UNIQUE_LINK = gql`\n  query($id: String) {\n    link(id: $id) {\n      email\n      duration\n      link\n    }\n  }\n`;\n\nexport default SignUpPage;\n"]},"metadata":{},"sourceType":"module"}