{"ast":null,"code":"// import React, { Component } from \"react\";\n// import { injectTapEventPlugin } from \"react-tap-event-plugin\";\n// import axios from \"axios\";\n// import async from \"async\";\n// import moment from \"moment\";\n// import AppBar from \"material-ui/AppBar\";\n// import Drawer from \"material-ui/Drawer\";\n// import Dialog from \"material-ui/Dialog\";\n// import Divider from \"material-ui/Divider\";\n// import MenuItem from \"material-ui/MenuItem\";\n// import Card from \"material-ui/Card\";\n// import DatePicker from \"material-ui/DatePicker\";\n// import TimePicker from \"material-ui/TimePicker\";\n// import TextField from \"material-ui/TextField\";\n// import SelectField from \"material-ui/SelectField\";\n// import SnackBar from \"material-ui/Snackbar\";\n// import {\n//   Step,\n//   Stepper,\n//   StepLabel,\n//   StepContent,\n//   StepButton,\n// } from \"material-ui/Stepper\";\n// import { RadioButton, RadioButtonGroup } from \"material-ui/RadioButton\";\n// import RaisedButton from \"material-ui/RaisedButton\";\n// // import FlatButton from \"material-ui/FlatButton\";\n// import { FlatButton } from \"material-ui\";\n// injectTapEventPlugin();\n// // const HOST = PRODUCTION ? \"/\" : \"http://localhost:3000/\";\n// const HOST = \"http://localhost:3000/\";\n// export default class calendar_test extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       loading: true,\n//       navOpen: false,\n//       confirmationModalOpen: false,\n//       confirmationTextVisible: false,\n//       stepIndex: 0,\n//       appointmentDateSelected: false,\n//       appointmentMeridiem: 0,\n//       validEmail: true,\n//       validPhone: true,\n//       smallScreen: window.innerWidth < 768,\n//       confirmationSnackbarOpen: false,\n//     };\n//     this.handleNavToggle = this.handleNavToggle.bind(this);\n//     this.handleNextStep = this.handleNextStep.bind(this);\n//     this.handleSetAppointmentDate = this.handleSetAppointmentDate.bind(this);\n//     this.handleSetAppointmentSlot = this.handleSetAppointmentSlot.bind(this);\n//     this.handleSetAppointmentMeridiem = this.handleSetAppointmentMeridiem.bind(\n//       this\n//     );\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.validateEmail = this.validateEmail.bind(this);\n//     this.validatePhone = this.validatePhone.bind(this);\n//     this.checkDisableDate = this.checkDisableDate.bind(this);\n//     this.renderAppointmentTimes = this.renderAppointmentTimes.bind(this);\n//     this.renderConfirmationString = this.renderConfirmationString.bind(this);\n//     this.renderAppointmentConfirmation = this.renderAppointmentConfirmation.bind(\n//       this\n//     );\n//     this.resize = this.resize.bind(this);\n//   }\n//   handleNavToggle() {\n//     return this.setState({ navOpen: !this.state.navOpen });\n//   }\n//   handleNextStep() {\n//     const { stepIndex } = this.state;\n//     return stepIndex < 3 ? this.setState({ stepIndex: stepIndex + 1 }) : null;\n//   }\n//   handleSetAppointmentDate(date) {\n//     this.handleNextStep();\n//     this.setState({ appointmentDate: date, confirmationTextVisible: true });\n//   }\n//   handleSetAppointmentSlot(slot) {\n//     this.handleNextStep();\n//     this.setState({ appointmentSlot: slot });\n//   }\n//   handleSetAppointmentMeridiem(meridiem) {\n//     this.setState({ appointmentMeridiem: meridiem });\n//   }\n//   handleFetch(response) {\n//     const { configs, appointments } = response;\n//     const initSchedule = {};\n//     const today = moment().startOf(\"day\");\n//     initSchedule[today.format(\"YYYY-DD-MM\")] = true;\n//     const schedule = !appointments.length\n//       ? initSchedule\n//       : appointments.reduce((currentSchedule, appointment) => {\n//           const { date, slot } = appointment;\n//           const dateString = moment(date, \"YYYY-DD-MM\").format(\"YYYY-DD-MM\");\n//           if (!currentSchedule[date]) {\n//             currentSchedule[dateString] = Array(8).fill(false);\n//           }\n//           if (Array.isArray(currentSchedule[dateString])) {\n//             currentSchedule[dateString][slot] = true;\n//           }\n//           return currentSchedule;\n//         }, initSchedule);\n//     //Imperative x 100, but no regrets\n//     for (let day in schedule) {\n//       let slots = schedule[day];\n//       //   slots.length\n//       //     ? slots.every((slot) => slot === true)\n//       //       ? (schedule[day] = true)\n//       //       : null\n//       //     : null;\n//     }\n//     this.setState({\n//       schedule,\n//       siteTitle: configs.site_title,\n//       aboutPageUrl: configs.about_page_url,\n//       contactPageUrl: configs.contact_page_url,\n//       homePageUrl: configs.home_page_url,\n//       loading: false,\n//     });\n//   }\n//   handleFetchError(err) {\n//     console.log(err);\n//     this.setState({\n//       confirmationSnackbarMessage: \"Error fetching data\",\n//       confirmationSnackbarOpen: true,\n//     });\n//   }\n//   handleSubmit() {\n//     const appointment = {\n//       date: moment(this.state.appointmentDate).format(\"YYYY-DD-MM\"),\n//       slot: this.state.appointmentSlot,\n//       name: this.state.firstName + \" \" + this.state.lastName,\n//       email: this.state.email,\n//       phone: this.state.phone,\n//     };\n//     axios\n//       .post(HOST + \"api/appointments\", appointment)\n//       .then((response) =>\n//         this.setState({\n//           confirmationSnackbarMessage: \"Appointment succesfully added!\",\n//           confirmationSnackbarOpen: true,\n//           processed: true,\n//         })\n//       )\n//       .catch((err) => {\n//         console.log(err);\n//         return this.setState({\n//           confirmationSnackbarMessage: \"Appointment failed to save.\",\n//           confirmationSnackbarOpen: true,\n//         });\n//       });\n//   }\n//   validateEmail(email) {\n//     const regex = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n//     return regex.test(email)\n//       ? this.setState({ email: email, validEmail: true })\n//       : this.setState({ validEmail: false });\n//   }\n//   validatePhone(phoneNumber) {\n//     const regex = /^(1\\s|1|)?((\\(\\d{3}\\))|\\d{3})(\\-|\\s)?(\\d{3})(\\-|\\s)?(\\d{4})$/;\n//     return regex.test(phoneNumber)\n//       ? this.setState({ phone: phoneNumber, validPhone: true })\n//       : this.setState({ validPhone: false });\n//   }\n//   checkDisableDate(day) {\n//     const dateString = moment(day).format(\"YYYY-DD-MM\");\n//     return (\n//       this.state.schedule[dateString] === true ||\n//       moment(day).startOf(\"day\").diff(moment().startOf(\"day\")) < 0\n//     );\n//   }\n//   renderConfirmationString() {\n//     const spanStyle = { color: \"#00bcd4\" };\n//     return this.state.confirmationTextVisible ? (\n//       <h2\n//         style={{\n//           textAlign: this.state.smallScreen ? \"center\" : \"left\",\n//           color: \"#bdbdbd\",\n//           lineHeight: 1.5,\n//           padding: \"0 10px\",\n//           fontFamily: \"Roboto\",\n//         }}\n//       >\n//         {\n//           <span>\n//             Scheduling a<span style={spanStyle}> 1 hour </span>\n//             appointment{\" \"}\n//             {this.state.appointmentDate && (\n//               <span>\n//                 on{\" \"}\n//                 <span style={spanStyle}>\n//                   {moment(this.state.appointmentDate).format(\"dddd[,] MMMM Do\")}\n//                 </span>\n//               </span>\n//             )}{\" \"}\n//             {Number.isInteger(this.state.appointmentSlot) && (\n//               <span>\n//                 at{\" \"}\n//                 <span style={spanStyle}>\n//                   {moment()\n//                     .hour(9)\n//                     .minute(0)\n//                     .add(this.state.appointmentSlot, \"hours\")\n//                     .format(\"h:mm a\")}\n//                 </span>\n//               </span>\n//             )}\n//           </span>\n//         }\n//       </h2>\n//     ) : null;\n//   }\n//   renderAppointmentTimes() {\n//     if (!this.state.loading) {\n//       const slots = [...Array(8).keys()];\n//       return slots.map((slot) => {\n//         const appointmentDateString = moment(this.state.appointmentDate).format(\n//           \"YYYY-DD-MM\"\n//         );\n//         const t1 = moment().hour(9).minute(0).add(slot, \"hours\");\n//         const t2 = moment()\n//           .hour(9)\n//           .minute(0)\n//           .add(slot + 1, \"hours\");\n//         const scheduleDisabled = this.state.schedule[appointmentDateString]\n//           ? this.state.schedule[\n//               moment(this.state.appointmentDate).format(\"YYYY-DD-MM\")\n//             ][slot]\n//           : false;\n//         const meridiemDisabled = this.state.appointmentMeridiem\n//           ? t1.format(\"a\") === \"am\"\n//           : t1.format(\"a\") === \"pm\";\n//         return (\n//           <RadioButton\n//             label={t1.format(\"h:mm a\") + \" - \" + t2.format(\"h:mm a\")}\n//             key={slot}\n//             value={slot}\n//             style={{\n//               marginBottom: 15,\n//               display: meridiemDisabled ? \"none\" : \"inherit\",\n//             }}\n//             disabled={scheduleDisabled || meridiemDisabled}\n//           />\n//         );\n//       });\n//     } else {\n//       return null;\n//     }\n//   }\n//   renderAppointmentConfirmation() {\n//     const spanStyle = { color: \"#00bcd4\" };\n//     return (\n//       <section>\n//         <p>\n//           Name:{\" \"}\n//           <span style={spanStyle}>\n//             {this.state.firstName} {this.state.lastName}\n//           </span>\n//         </p>\n//         <p>\n//           Number: <span style={spanStyle}>{this.state.phone}</span>\n//         </p>\n//         <p>\n//           Email: <span style={spanStyle}>{this.state.email}</span>\n//         </p>\n//         <p>\n//           Appointment:{\" \"}\n//           <span style={spanStyle}>\n//             {moment(this.state.appointmentDate).format(\n//               \"dddd[,] MMMM Do[,] YYYY\"\n//             )}\n//           </span>{\" \"}\n//           at{\" \"}\n//           <span style={spanStyle}>\n//             {moment()\n//               .hour(9)\n//               .minute(0)\n//               .add(this.state.appointmentSlot, \"hours\")\n//               .format(\"h:mm a\")}\n//           </span>\n//         </p>\n//       </section>\n//     );\n//   }\n//   resize() {\n//     this.setState({ smallScreen: window.innerWidth < 768 });\n//   }\n//   componentWillMount() {\n//     async.series(\n//       {\n//         configs(callback) {\n//           axios\n//             .get(HOST + \"api/config\")\n//             .then((res) => callback(null, res.data.data));\n//         },\n//         appointments(callback) {\n//           axios.get(HOST + \"api/appointments\").then((res) => {\n//             callback(null, res.data.data);\n//           });\n//         },\n//       },\n//       (err, response) => {\n//         err ? this.handleFetchError(err) : this.handleFetch(response);\n//       }\n//     );\n//     //addEventListener(\"resize\", this.resize);\n//   }\n//   //   componentWillUnmount() {\n//   //     removeEventListener(\"resize\", this.resize);\n//   //   }\n//   render() {\n//     const {\n//       stepIndex,\n//       loading,\n//       navOpen,\n//       smallScreen,\n//       confirmationModalOpen,\n//       confirmationSnackbarOpen,\n//       ...data\n//     } = this.state;\n//     const contactFormFilled =\n//       data.firstName &&\n//       data.lastName &&\n//       data.phone &&\n//       data.email &&\n//       data.validPhone &&\n//       data.validEmail;\n//     const modalActions = [\n//       <FlatButton\n//         label=\"Cancel\"\n//         primary={false}\n//         onClick={() => this.setState({ confirmationModalOpen: false })}\n//       />,\n//       <FlatButton\n//         label=\"Confirm\"\n//         primary={true}\n//         onClick={() => this.handleSubmit()}\n//       />,\n//     ];\n//     return (\n//       <div>\n//         <AppBar\n//           title={data.siteTitle}\n//           onLeftIconButtonTouchTap={() => this.handleNavToggle()}\n//         />\n//         <Drawer\n//           docked={false}\n//           width={300}\n//           open={navOpen}\n//           onRequestChange={(navOpen) => this.setState({ navOpen })}\n//         >\n//           <a style={{ textDecoration: \"none\" }} href={this.state.homePageUrl}>\n//             <MenuItem>Home</MenuItem>\n//           </a>\n//           <a style={{ textDecoration: \"none\" }} href={this.state.aboutPageUrl}>\n//             <MenuItem>About</MenuItem>\n//           </a>\n//           <a\n//             style={{ textDecoration: \"none\" }}\n//             href={this.state.contactPageUrl}\n//           >\n//             <MenuItem>Contact</MenuItem>\n//           </a>\n//           <MenuItem\n//             disabled={true}\n//             style={{\n//               marginLeft: \"50%\",\n//               transform: \"translate(-50%)\",\n//             }}\n//           >\n//             {\"© Copyright \" + moment().format(\"YYYY\")}\n//           </MenuItem>\n//         </Drawer>\n//         <section\n//           style={{\n//             maxWidth: !smallScreen ? \"80%\" : \"100%\",\n//             margin: \"auto\",\n//             marginTop: !smallScreen ? 20 : 0,\n//           }}\n//         >\n//           {this.renderConfirmationString()}\n//           <Card\n//             style={{\n//               padding: \"10px 10px 25px 10px\",\n//               height: smallScreen ? \"100vh\" : null,\n//             }}\n//           >\n//             <Stepper\n//               activeStep={stepIndex}\n//               linear={false}\n//               orientation=\"vertical\"\n//             >\n//               <Step disabled={loading}>\n//                 <StepButton onClick={() => this.setState({ stepIndex: 0 })}>\n//                   Choose an available day for your appointment\n//                 </StepButton>\n//                 <StepContent>\n//                   <DatePicker\n//                     style={{\n//                       marginTop: 10,\n//                       marginLeft: 10,\n//                     }}\n//                     value={data.appointmentDate}\n//                     hintText=\"Select a date\"\n//                     mode={smallScreen ? \"portrait\" : \"landscape\"}\n//                     onChange={(n, date) => this.handleSetAppointmentDate(date)}\n//                     shouldDisableDate={(day) => this.checkDisableDate(day)}\n//                   />\n//                 </StepContent>\n//               </Step>\n//               <Step disabled={!data.appointmentDate}>\n//                 <StepButton onClick={() => this.setState({ stepIndex: 1 })}>\n//                   Choose an available time for your appointment\n//                 </StepButton>\n//                 <StepContent>\n//                   <SelectField\n//                     floatingLabelText=\"AM or PM\"\n//                     value={data.appointmentMeridiem}\n//                     onChange={(evt, key, payload) =>\n//                       this.handleSetAppointmentMeridiem(payload)\n//                     }\n//                     selectionRenderer={(value) => (value ? \"PM\" : \"AM\")}\n//                   >\n//                     <MenuItem value={0}>AM</MenuItem>\n//                     <MenuItem value={1}>PM</MenuItem>\n//                   </SelectField>\n//                   <RadioButtonGroup\n//                     style={{ marginTop: 15, marginLeft: 15 }}\n//                     name=\"appointmentTimes\"\n//                     defaultSelected={data.appointmentSlot}\n//                     onChange={(evt, val) => this.handleSetAppointmentSlot(val)}\n//                   >\n//                     {this.renderAppointmentTimes()}\n//                   </RadioButtonGroup>\n//                 </StepContent>\n//               </Step>\n//               <Step disabled={!Number.isInteger(this.state.appointmentSlot)}>\n//                 <StepButton onClick={() => this.setState({ stepIndex: 2 })}>\n//                   Share your contact information with us and we'll send you a\n//                   reminder\n//                 </StepButton>\n//                 <StepContent>\n//                   <section>\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"first_name\"\n//                       hintText=\"First Name\"\n//                       floatingLabelText=\"First Name\"\n//                       onChange={(evt, newValue) =>\n//                         this.setState({ firstName: newValue })\n//                       }\n//                     />\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"last_name\"\n//                       hintText=\"Last Name\"\n//                       floatingLabelText=\"Last Name\"\n//                       onChange={(evt, newValue) =>\n//                         this.setState({ lastName: newValue })\n//                       }\n//                     />\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"email\"\n//                       hintText=\"name@mail.com\"\n//                       floatingLabelText=\"Email\"\n//                       errorText={\n//                         data.validEmail ? null : \"Enter a valid email address\"\n//                       }\n//                       onChange={(evt, newValue) => this.validateEmail(newValue)}\n//                     />\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"phone\"\n//                       hintText=\"(888) 888-8888\"\n//                       floatingLabelText=\"Phone\"\n//                       errorText={\n//                         data.validPhone ? null : \"Enter a valid phone number\"\n//                       }\n//                       onChange={(evt, newValue) => this.validatePhone(newValue)}\n//                     />\n//                     <RaisedButton\n//                       style={{ display: \"block\" }}\n//                       label={\n//                         contactFormFilled\n//                           ? \"Schedule\"\n//                           : \"Fill out your information to schedule\"\n//                       }\n//                       labelPosition=\"before\"\n//                       primary={true}\n//                       fullWidth={true}\n//                       onClick={() =>\n//                         this.setState({\n//                           confirmationModalOpen: !this.state\n//                             .confirmationModalOpen,\n//                         })\n//                       }\n//                       disabled={!contactFormFilled || data.processed}\n//                       style={{ marginTop: 20, maxWidth: 100 }}\n//                     />\n//                   </section>\n//                 </StepContent>\n//               </Step>\n//             </Stepper>\n//           </Card>\n//           <Dialog\n//             modal={true}\n//             open={confirmationModalOpen}\n//             actions={modalActions}\n//             title=\"Confirm your appointment\"\n//           >\n//             {this.renderAppointmentConfirmation()}\n//           </Dialog>\n//           <SnackBar\n//             open={confirmationSnackbarOpen || loading}\n//             message={\n//               loading ? \"Loading... \" : data.confirmationSnackbarMessage || \"\"\n//             }\n//             autoHideDuration={10000}\n//             onRequestClose={() =>\n//               this.setState({ confirmationSnackbarOpen: false })\n//             }\n//           />\n//         </section>\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/kimberlyzhu/Documents/MeetingGround/src/pages/calendar_test.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { Component } from \"react\";\n// import { injectTapEventPlugin } from \"react-tap-event-plugin\";\n// import axios from \"axios\";\n// import async from \"async\";\n// import moment from \"moment\";\n// import AppBar from \"material-ui/AppBar\";\n// import Drawer from \"material-ui/Drawer\";\n// import Dialog from \"material-ui/Dialog\";\n// import Divider from \"material-ui/Divider\";\n// import MenuItem from \"material-ui/MenuItem\";\n// import Card from \"material-ui/Card\";\n// import DatePicker from \"material-ui/DatePicker\";\n// import TimePicker from \"material-ui/TimePicker\";\n// import TextField from \"material-ui/TextField\";\n// import SelectField from \"material-ui/SelectField\";\n// import SnackBar from \"material-ui/Snackbar\";\n// import {\n//   Step,\n//   Stepper,\n//   StepLabel,\n//   StepContent,\n//   StepButton,\n// } from \"material-ui/Stepper\";\n// import { RadioButton, RadioButtonGroup } from \"material-ui/RadioButton\";\n// import RaisedButton from \"material-ui/RaisedButton\";\n// // import FlatButton from \"material-ui/FlatButton\";\n// import { FlatButton } from \"material-ui\";\n\n// injectTapEventPlugin();\n// // const HOST = PRODUCTION ? \"/\" : \"http://localhost:3000/\";\n// const HOST = \"http://localhost:3000/\";\n\n// export default class calendar_test extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       loading: true,\n//       navOpen: false,\n//       confirmationModalOpen: false,\n//       confirmationTextVisible: false,\n//       stepIndex: 0,\n//       appointmentDateSelected: false,\n//       appointmentMeridiem: 0,\n//       validEmail: true,\n//       validPhone: true,\n//       smallScreen: window.innerWidth < 768,\n//       confirmationSnackbarOpen: false,\n//     };\n\n//     this.handleNavToggle = this.handleNavToggle.bind(this);\n//     this.handleNextStep = this.handleNextStep.bind(this);\n//     this.handleSetAppointmentDate = this.handleSetAppointmentDate.bind(this);\n//     this.handleSetAppointmentSlot = this.handleSetAppointmentSlot.bind(this);\n//     this.handleSetAppointmentMeridiem = this.handleSetAppointmentMeridiem.bind(\n//       this\n//     );\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.validateEmail = this.validateEmail.bind(this);\n//     this.validatePhone = this.validatePhone.bind(this);\n//     this.checkDisableDate = this.checkDisableDate.bind(this);\n//     this.renderAppointmentTimes = this.renderAppointmentTimes.bind(this);\n//     this.renderConfirmationString = this.renderConfirmationString.bind(this);\n//     this.renderAppointmentConfirmation = this.renderAppointmentConfirmation.bind(\n//       this\n//     );\n//     this.resize = this.resize.bind(this);\n//   }\n\n//   handleNavToggle() {\n//     return this.setState({ navOpen: !this.state.navOpen });\n//   }\n\n//   handleNextStep() {\n//     const { stepIndex } = this.state;\n//     return stepIndex < 3 ? this.setState({ stepIndex: stepIndex + 1 }) : null;\n//   }\n\n//   handleSetAppointmentDate(date) {\n//     this.handleNextStep();\n//     this.setState({ appointmentDate: date, confirmationTextVisible: true });\n//   }\n\n//   handleSetAppointmentSlot(slot) {\n//     this.handleNextStep();\n//     this.setState({ appointmentSlot: slot });\n//   }\n\n//   handleSetAppointmentMeridiem(meridiem) {\n//     this.setState({ appointmentMeridiem: meridiem });\n//   }\n\n//   handleFetch(response) {\n//     const { configs, appointments } = response;\n//     const initSchedule = {};\n//     const today = moment().startOf(\"day\");\n//     initSchedule[today.format(\"YYYY-DD-MM\")] = true;\n//     const schedule = !appointments.length\n//       ? initSchedule\n//       : appointments.reduce((currentSchedule, appointment) => {\n//           const { date, slot } = appointment;\n//           const dateString = moment(date, \"YYYY-DD-MM\").format(\"YYYY-DD-MM\");\n//           if (!currentSchedule[date]) {\n//             currentSchedule[dateString] = Array(8).fill(false);\n//           }\n//           if (Array.isArray(currentSchedule[dateString])) {\n//             currentSchedule[dateString][slot] = true;\n//           }\n//           return currentSchedule;\n//         }, initSchedule);\n\n//     //Imperative x 100, but no regrets\n//     for (let day in schedule) {\n//       let slots = schedule[day];\n//       //   slots.length\n//       //     ? slots.every((slot) => slot === true)\n//       //       ? (schedule[day] = true)\n//       //       : null\n//       //     : null;\n//     }\n\n//     this.setState({\n//       schedule,\n//       siteTitle: configs.site_title,\n//       aboutPageUrl: configs.about_page_url,\n//       contactPageUrl: configs.contact_page_url,\n//       homePageUrl: configs.home_page_url,\n//       loading: false,\n//     });\n//   }\n\n//   handleFetchError(err) {\n//     console.log(err);\n//     this.setState({\n//       confirmationSnackbarMessage: \"Error fetching data\",\n//       confirmationSnackbarOpen: true,\n//     });\n//   }\n\n//   handleSubmit() {\n//     const appointment = {\n//       date: moment(this.state.appointmentDate).format(\"YYYY-DD-MM\"),\n//       slot: this.state.appointmentSlot,\n//       name: this.state.firstName + \" \" + this.state.lastName,\n//       email: this.state.email,\n//       phone: this.state.phone,\n//     };\n//     axios\n//       .post(HOST + \"api/appointments\", appointment)\n//       .then((response) =>\n//         this.setState({\n//           confirmationSnackbarMessage: \"Appointment succesfully added!\",\n//           confirmationSnackbarOpen: true,\n//           processed: true,\n//         })\n//       )\n//       .catch((err) => {\n//         console.log(err);\n//         return this.setState({\n//           confirmationSnackbarMessage: \"Appointment failed to save.\",\n//           confirmationSnackbarOpen: true,\n//         });\n//       });\n//   }\n\n//   validateEmail(email) {\n//     const regex = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n//     return regex.test(email)\n//       ? this.setState({ email: email, validEmail: true })\n//       : this.setState({ validEmail: false });\n//   }\n\n//   validatePhone(phoneNumber) {\n//     const regex = /^(1\\s|1|)?((\\(\\d{3}\\))|\\d{3})(\\-|\\s)?(\\d{3})(\\-|\\s)?(\\d{4})$/;\n//     return regex.test(phoneNumber)\n//       ? this.setState({ phone: phoneNumber, validPhone: true })\n//       : this.setState({ validPhone: false });\n//   }\n\n//   checkDisableDate(day) {\n//     const dateString = moment(day).format(\"YYYY-DD-MM\");\n//     return (\n//       this.state.schedule[dateString] === true ||\n//       moment(day).startOf(\"day\").diff(moment().startOf(\"day\")) < 0\n//     );\n//   }\n\n//   renderConfirmationString() {\n//     const spanStyle = { color: \"#00bcd4\" };\n//     return this.state.confirmationTextVisible ? (\n//       <h2\n//         style={{\n//           textAlign: this.state.smallScreen ? \"center\" : \"left\",\n//           color: \"#bdbdbd\",\n//           lineHeight: 1.5,\n//           padding: \"0 10px\",\n//           fontFamily: \"Roboto\",\n//         }}\n//       >\n//         {\n//           <span>\n//             Scheduling a<span style={spanStyle}> 1 hour </span>\n//             appointment{\" \"}\n//             {this.state.appointmentDate && (\n//               <span>\n//                 on{\" \"}\n//                 <span style={spanStyle}>\n//                   {moment(this.state.appointmentDate).format(\"dddd[,] MMMM Do\")}\n//                 </span>\n//               </span>\n//             )}{\" \"}\n//             {Number.isInteger(this.state.appointmentSlot) && (\n//               <span>\n//                 at{\" \"}\n//                 <span style={spanStyle}>\n//                   {moment()\n//                     .hour(9)\n//                     .minute(0)\n//                     .add(this.state.appointmentSlot, \"hours\")\n//                     .format(\"h:mm a\")}\n//                 </span>\n//               </span>\n//             )}\n//           </span>\n//         }\n//       </h2>\n//     ) : null;\n//   }\n\n//   renderAppointmentTimes() {\n//     if (!this.state.loading) {\n//       const slots = [...Array(8).keys()];\n//       return slots.map((slot) => {\n//         const appointmentDateString = moment(this.state.appointmentDate).format(\n//           \"YYYY-DD-MM\"\n//         );\n//         const t1 = moment().hour(9).minute(0).add(slot, \"hours\");\n//         const t2 = moment()\n//           .hour(9)\n//           .minute(0)\n//           .add(slot + 1, \"hours\");\n//         const scheduleDisabled = this.state.schedule[appointmentDateString]\n//           ? this.state.schedule[\n//               moment(this.state.appointmentDate).format(\"YYYY-DD-MM\")\n//             ][slot]\n//           : false;\n//         const meridiemDisabled = this.state.appointmentMeridiem\n//           ? t1.format(\"a\") === \"am\"\n//           : t1.format(\"a\") === \"pm\";\n//         return (\n//           <RadioButton\n//             label={t1.format(\"h:mm a\") + \" - \" + t2.format(\"h:mm a\")}\n//             key={slot}\n//             value={slot}\n//             style={{\n//               marginBottom: 15,\n//               display: meridiemDisabled ? \"none\" : \"inherit\",\n//             }}\n//             disabled={scheduleDisabled || meridiemDisabled}\n//           />\n//         );\n//       });\n//     } else {\n//       return null;\n//     }\n//   }\n\n//   renderAppointmentConfirmation() {\n//     const spanStyle = { color: \"#00bcd4\" };\n//     return (\n//       <section>\n//         <p>\n//           Name:{\" \"}\n//           <span style={spanStyle}>\n//             {this.state.firstName} {this.state.lastName}\n//           </span>\n//         </p>\n//         <p>\n//           Number: <span style={spanStyle}>{this.state.phone}</span>\n//         </p>\n//         <p>\n//           Email: <span style={spanStyle}>{this.state.email}</span>\n//         </p>\n//         <p>\n//           Appointment:{\" \"}\n//           <span style={spanStyle}>\n//             {moment(this.state.appointmentDate).format(\n//               \"dddd[,] MMMM Do[,] YYYY\"\n//             )}\n//           </span>{\" \"}\n//           at{\" \"}\n//           <span style={spanStyle}>\n//             {moment()\n//               .hour(9)\n//               .minute(0)\n//               .add(this.state.appointmentSlot, \"hours\")\n//               .format(\"h:mm a\")}\n//           </span>\n//         </p>\n//       </section>\n//     );\n//   }\n\n//   resize() {\n//     this.setState({ smallScreen: window.innerWidth < 768 });\n//   }\n\n//   componentWillMount() {\n//     async.series(\n//       {\n//         configs(callback) {\n//           axios\n//             .get(HOST + \"api/config\")\n//             .then((res) => callback(null, res.data.data));\n//         },\n//         appointments(callback) {\n//           axios.get(HOST + \"api/appointments\").then((res) => {\n//             callback(null, res.data.data);\n//           });\n//         },\n//       },\n//       (err, response) => {\n//         err ? this.handleFetchError(err) : this.handleFetch(response);\n//       }\n//     );\n//     //addEventListener(\"resize\", this.resize);\n//   }\n\n//   //   componentWillUnmount() {\n//   //     removeEventListener(\"resize\", this.resize);\n//   //   }\n\n//   render() {\n//     const {\n//       stepIndex,\n//       loading,\n//       navOpen,\n//       smallScreen,\n//       confirmationModalOpen,\n//       confirmationSnackbarOpen,\n//       ...data\n//     } = this.state;\n//     const contactFormFilled =\n//       data.firstName &&\n//       data.lastName &&\n//       data.phone &&\n//       data.email &&\n//       data.validPhone &&\n//       data.validEmail;\n//     const modalActions = [\n//       <FlatButton\n//         label=\"Cancel\"\n//         primary={false}\n//         onClick={() => this.setState({ confirmationModalOpen: false })}\n//       />,\n//       <FlatButton\n//         label=\"Confirm\"\n//         primary={true}\n//         onClick={() => this.handleSubmit()}\n//       />,\n//     ];\n//     return (\n//       <div>\n//         <AppBar\n//           title={data.siteTitle}\n//           onLeftIconButtonTouchTap={() => this.handleNavToggle()}\n//         />\n//         <Drawer\n//           docked={false}\n//           width={300}\n//           open={navOpen}\n//           onRequestChange={(navOpen) => this.setState({ navOpen })}\n//         >\n//           <a style={{ textDecoration: \"none\" }} href={this.state.homePageUrl}>\n//             <MenuItem>Home</MenuItem>\n//           </a>\n//           <a style={{ textDecoration: \"none\" }} href={this.state.aboutPageUrl}>\n//             <MenuItem>About</MenuItem>\n//           </a>\n//           <a\n//             style={{ textDecoration: \"none\" }}\n//             href={this.state.contactPageUrl}\n//           >\n//             <MenuItem>Contact</MenuItem>\n//           </a>\n\n//           <MenuItem\n//             disabled={true}\n//             style={{\n//               marginLeft: \"50%\",\n//               transform: \"translate(-50%)\",\n//             }}\n//           >\n//             {\"© Copyright \" + moment().format(\"YYYY\")}\n//           </MenuItem>\n//         </Drawer>\n//         <section\n//           style={{\n//             maxWidth: !smallScreen ? \"80%\" : \"100%\",\n//             margin: \"auto\",\n//             marginTop: !smallScreen ? 20 : 0,\n//           }}\n//         >\n//           {this.renderConfirmationString()}\n//           <Card\n//             style={{\n//               padding: \"10px 10px 25px 10px\",\n//               height: smallScreen ? \"100vh\" : null,\n//             }}\n//           >\n//             <Stepper\n//               activeStep={stepIndex}\n//               linear={false}\n//               orientation=\"vertical\"\n//             >\n//               <Step disabled={loading}>\n//                 <StepButton onClick={() => this.setState({ stepIndex: 0 })}>\n//                   Choose an available day for your appointment\n//                 </StepButton>\n//                 <StepContent>\n//                   <DatePicker\n//                     style={{\n//                       marginTop: 10,\n//                       marginLeft: 10,\n//                     }}\n//                     value={data.appointmentDate}\n//                     hintText=\"Select a date\"\n//                     mode={smallScreen ? \"portrait\" : \"landscape\"}\n//                     onChange={(n, date) => this.handleSetAppointmentDate(date)}\n//                     shouldDisableDate={(day) => this.checkDisableDate(day)}\n//                   />\n//                 </StepContent>\n//               </Step>\n//               <Step disabled={!data.appointmentDate}>\n//                 <StepButton onClick={() => this.setState({ stepIndex: 1 })}>\n//                   Choose an available time for your appointment\n//                 </StepButton>\n//                 <StepContent>\n//                   <SelectField\n//                     floatingLabelText=\"AM or PM\"\n//                     value={data.appointmentMeridiem}\n//                     onChange={(evt, key, payload) =>\n//                       this.handleSetAppointmentMeridiem(payload)\n//                     }\n//                     selectionRenderer={(value) => (value ? \"PM\" : \"AM\")}\n//                   >\n//                     <MenuItem value={0}>AM</MenuItem>\n//                     <MenuItem value={1}>PM</MenuItem>\n//                   </SelectField>\n//                   <RadioButtonGroup\n//                     style={{ marginTop: 15, marginLeft: 15 }}\n//                     name=\"appointmentTimes\"\n//                     defaultSelected={data.appointmentSlot}\n//                     onChange={(evt, val) => this.handleSetAppointmentSlot(val)}\n//                   >\n//                     {this.renderAppointmentTimes()}\n//                   </RadioButtonGroup>\n//                 </StepContent>\n//               </Step>\n//               <Step disabled={!Number.isInteger(this.state.appointmentSlot)}>\n//                 <StepButton onClick={() => this.setState({ stepIndex: 2 })}>\n//                   Share your contact information with us and we'll send you a\n//                   reminder\n//                 </StepButton>\n//                 <StepContent>\n//                   <section>\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"first_name\"\n//                       hintText=\"First Name\"\n//                       floatingLabelText=\"First Name\"\n//                       onChange={(evt, newValue) =>\n//                         this.setState({ firstName: newValue })\n//                       }\n//                     />\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"last_name\"\n//                       hintText=\"Last Name\"\n//                       floatingLabelText=\"Last Name\"\n//                       onChange={(evt, newValue) =>\n//                         this.setState({ lastName: newValue })\n//                       }\n//                     />\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"email\"\n//                       hintText=\"name@mail.com\"\n//                       floatingLabelText=\"Email\"\n//                       errorText={\n//                         data.validEmail ? null : \"Enter a valid email address\"\n//                       }\n//                       onChange={(evt, newValue) => this.validateEmail(newValue)}\n//                     />\n//                     <TextField\n//                       style={{ display: \"block\" }}\n//                       name=\"phone\"\n//                       hintText=\"(888) 888-8888\"\n//                       floatingLabelText=\"Phone\"\n//                       errorText={\n//                         data.validPhone ? null : \"Enter a valid phone number\"\n//                       }\n//                       onChange={(evt, newValue) => this.validatePhone(newValue)}\n//                     />\n//                     <RaisedButton\n//                       style={{ display: \"block\" }}\n//                       label={\n//                         contactFormFilled\n//                           ? \"Schedule\"\n//                           : \"Fill out your information to schedule\"\n//                       }\n//                       labelPosition=\"before\"\n//                       primary={true}\n//                       fullWidth={true}\n//                       onClick={() =>\n//                         this.setState({\n//                           confirmationModalOpen: !this.state\n//                             .confirmationModalOpen,\n//                         })\n//                       }\n//                       disabled={!contactFormFilled || data.processed}\n//                       style={{ marginTop: 20, maxWidth: 100 }}\n//                     />\n//                   </section>\n//                 </StepContent>\n//               </Step>\n//             </Stepper>\n//           </Card>\n//           <Dialog\n//             modal={true}\n//             open={confirmationModalOpen}\n//             actions={modalActions}\n//             title=\"Confirm your appointment\"\n//           >\n//             {this.renderAppointmentConfirmation()}\n//           </Dialog>\n//           <SnackBar\n//             open={confirmationSnackbarOpen || loading}\n//             message={\n//               loading ? \"Loading... \" : data.confirmationSnackbarMessage || \"\"\n//             }\n//             autoHideDuration={10000}\n//             onRequestClose={() =>\n//               this.setState({ confirmationSnackbarOpen: false })\n//             }\n//           />\n//         </section>\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}